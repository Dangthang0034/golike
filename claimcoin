<?php
system("clear");

function clear() {
    system("clear");
}

while(true) {
    $cookieFile = 'claimcoin.txt';
    $cookie = '';

    // Kiểm tra nếu tệp cookie đã tồn tại và có dữ liệu
    if (file_exists($cookieFile) && filesize($cookieFile) > 0) {
        $cookie = trim(file_get_contents($cookieFile));
    } else {
        echo "Nhập cookie của bạn: ";
        $cookie = trim(fgets(STDIN)); // Đọc cookie từ bàn phím và loại bỏ khoảng trắng

        // Kiểm tra nếu người dùng nhập cookie và ghi vào tệp nếu hợp lệ
        if (!empty($cookie)) {
            file_put_contents($cookieFile, $cookie . PHP_EOL);
        } else {
            echo "Không có cookie được nhập. Vui lòng nhập cookie hợp lệ.\n";
            exit;
        }
    }

    $ch = curl_init();
    curl_setopt($ch, CURLOPT_URL, "https://claimcoin.in/ptc");
    curl_setopt($ch, CURLOPT_RETURNTRANSFER, true);
    curl_setopt($ch, CURLOPT_COOKIE, $cookie);
    $response = curl_exec($ch);

    // Kiểm tra lỗi cURL
    if (curl_errno($ch)) {
        echo 'Lỗi: ' . curl_error($ch) . "\n";
        exit;
    }

    // Kiểm tra xem phản hồi có chứa lỗi liên quan đến cookie không
    if (strpos($response, 'Invalid cookie') !== false || empty($response)) {
        echo "Cookie không hợp lệ. Vui lòng nhập lại cookie.\n";
        file_put_contents($cookieFile, ''); // Xóa cookie cũ trong tệp
        echo "Nhập cookie mới của bạn: ";
        $cookie = trim(fgets(STDIN)); // Yêu cầu nhập lại cookie
        file_put_contents($cookieFile, $cookie . PHP_EOL); // Lưu cookie mới vào tệp
        echo "Cookie mới đã được ghi vào file claimcoin.txt.\n";
    } else {
        // Kiểm tra và hiển thị token
        getTokenBalance($cookie);

        // Thực hiện nhiệm vụ chính
        do {
            $taskCompleted = performTask($cookie);
            if ($taskCompleted) {
                // Nếu đã hoàn thành nhiệm vụ, kiểm tra lại trạng thái token
                getTokenBalance($cookie);
            } else {
                // Nếu không còn nhiệm vụ, dừng vòng lặp
                echo "Không còn nhiệm vụ nào. Dừng lại.\n";
                break;
            }
        } while (true);

        // Nếu không còn nhiệm vụ, chờ một khoảng thời gian và thử lại
        echo "Không còn nhiệm vụ, tìm lại nhiệm vụ sau 30 phút...\n";
        for ($delay = 1800; $delay > 0; $delay--) {
            echo "Hết nhiệm vụ, tìm lại nhiệm vụ sau $delay giây \r";
            sleep(1);
        }
    }

    curl_close($ch);
}

function fetchPage($url, $cookie) {
    $ch = curl_init();
    curl_setopt($ch, CURLOPT_URL, $url);
    curl_setopt($ch, CURLOPT_RETURNTRANSFER, true);
    curl_setopt($ch, CURLOPT_COOKIE, $cookie);  // Gửi cookie trong yêu cầu
    $response = curl_exec($ch);

    if (curl_errno($ch)) {
        echo 'Error: ' . curl_error($ch);
        exit;
    }
    curl_close($ch);

    return $response;
}

function getTokenBalance($cookie) {
    $url = 'https://claimcoin.in/dashboard';
    $response = fetchPage($url, $cookie);

    // Phân tích HTML và lấy số dư token
    $doc = new DOMDocument();
    @$doc->loadHTML($response);
    $xpath = new DOMXPath($doc);

    // Tìm phần tử chứa số dư token
    $tokenNode = $xpath->query('//div[@class="project-counter"]/h2')->item(0);
    if ($tokenNode) {
        $tokenBalance = trim($tokenNode->nodeValue);
        echo "Token của bạn là: " . $tokenBalance . "\n";
    } else {
        echo "Không tìm thấy số dư token.\n";
    }
}

// Sửa lại hàm performTask để trả về true/false tùy vào việc có nhiệm vụ hay không
function performTask($cookie) {
    $url = 'https://claimcoin.in/ptc';
    $response = fetchPage($url, $cookie);

    // Phân tích HTML và lấy thông tin nhiệm vụ
    $doc = new DOMDocument();
    @$doc->loadHTML($response);
    $xpath = new DOMXPath($doc);

    // Tìm phần tử chứa thông tin nhiệm vụ
    $buttonNode = $xpath->query('//button[contains(@class, "btn-success")]')->item(0);
    if ($buttonNode) {
        $urll = $buttonNode->getAttribute('onclick');
        preg_match("/location.href='(.*?)'/", $urll, $urlMatches);
        $urll = isset($urlMatches[1]) ? $urlMatches[1] : null;

        // Thực hiện nhiệm vụ
        $response = fetchPage($urll, $cookie);

        // Chờ đợi và làm nhiệm vụ
        $timeNode = $xpath->query('//span[@class="badge span-danger text-danger"]')->item(0);
        if ($timeNode) {
            preg_match('/(\d+)\s+seconds/', $timeNode->nodeValue, $matches);
            $time = isset($matches[1]) ? $matches[1] : null;
        }

        if ($urll && $time) {
            for ($t = $time; $t > 0; $t--) {
                echo "Làm nhiệm vụ trong $t giây...\r";
                sleep(1);
            }

            // Thực hiện bước xác nhận
            $csrfNode = $xpath->query('//input[@name="csrf_token_name"]')->item(0);
            if ($csrfNode) {
                $csrf_token = $csrfNode->getAttribute('value');
            } else {
                echo "Không tìm thấy csrf_token_name.\n";
                return false; // Không thể hoàn thành nhiệm vụ
            }

            $postData = ['csrf_token_name' => $csrf_token];
            $sv = basename($urll);
            $urlPost = "https://claimcoin.in/ptc/verify/" . $sv;

            $ch = curl_init();
            curl_setopt($ch, CURLOPT_URL, $urlPost);
            curl_setopt($ch, CURLOPT_RETURNTRANSFER, true);
            curl_setopt($ch, CURLOPT_COOKIE, $cookie);
            curl_setopt($ch, CURLOPT_POST, true);
            curl_setopt($ch, CURLOPT_POSTFIELDS, $postData);
            $response = curl_exec($ch);

            if (curl_errno($ch)) {
                echo 'Error: ' . curl_error($ch);
                exit;
            }
            curl_close($ch);

            echo "Đã hoàn thành nhiệm vụ.\r";
            return true; // Nhiệm vụ đã hoàn thành
        } else {
            echo "Không tìm thấy link làm nhiệm vụ \r";
            return false;
        }
    } else {
        echo "Không có nhiệm vụ nào.\r";
        return false; // Không có nhiệm vụ
    }
}
?>
